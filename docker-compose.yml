version: '3.6'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    hostname: zookeeper
    container_name: swat-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - water-treatment-network

  kafka:
    image: confluentinc/cp-kafka:7.4.3
    hostname: kafka
    container_name: swat-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks:
      - water-treatment-network

  cmak:
    image: ghcr.io/eshepelyuk/dckr/cmak-3.0.0.5:latest
    container_name: swat-cmak
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
    networks:
      - water-treatment-network

  spark:
    image: docker.io/bitnami/spark:3.5
    container_name: swat-spark
    restart: unless-stopped
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - '8080:8080'
    networks:
      - water-treatment-network
    volumes:
        - ./:/swat-change-detection

  influxdb:
    image: influxdb:2.7.4
    container_name: swat-influxdb
    restart: unless-stopped
    ports:
      - 8086:8086
    environment:
     - DOCKER_INFLUXDB_INIT_MODE=setup
     - DOCKER_INFLUXDB_INIT_USERNAME=admin
     - DOCKER_INFLUXDB_INIT_PASSWORD=admin1234
     - INFLUXDB_ADMIN_USER_TOKEN=SYyrzrHxew1mlzetBoluYQMHrGeQjtmkjde7DHk8fWrsGNWd5toMp1aNUFQyA4GrfCPeXn88uislDXOeddRF-Q==
     - INFLUXDB_DB=influx
     - DOCKER_INFLUXDB_INIT_ORG=swat-change-detection
     - DOCKER_INFLUXDB_INIT_BUCKET=water-treatment
    networks:
      - water-treatment-network
    volumes:
      - influxdb-storage:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2

  telegraf:
    image: telegraf:1.28.5
    container_name: swat-telegraf
    restart: unless-stopped
    ports:
      - 8125:8125
    volumes:
      - ./config/telegraf.conf:/etc/telegraf/telegraf.conf:rw
    depends_on:
      - influxdb
    networks:
      - water-treatment-network

  grafana:
    image: grafana/grafana:10.2.2
    container_name: swat-grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin1234
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - influxdb
    networks:
      - water-treatment-network

volumes:
  influxdb-storage:
  influxdb-config:
  grafana-storage:

networks:
  water-treatment-network:
    driver: bridge  